// Parametrics by nimitz (twitter @stormoid)
// https://www.shadertoy.com/view/XdSSRw
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
// Contact the author for other licensing options

/*
	The problem with the drawing parametric curves in 2d (or 3d) can be seen as a mathematical
	optimization problem: Trying to find the closest distance between a point and a given
	parametric curve.

	The goal is then to find the global minimum of the distance between a pixel and said curve.
	The approach I am taking here is to stepping through the curve's parameter and trying to 
	find a coarse global minimum. Then I use the bisection method on the derivative of the
	distance to find the exact minimum.

	I am sure the main iterator can be optimized, or that my method could be improved.
	Let me know if you can help.
*/
// handwriting morphing, Xavierseb 2019

// bezier control points coordinates (x0,x1,x2,x3) and (y0,y1,y2,y3)
// font char is drawn by bezier spline with control points at (x0,y0),(x1,y1),(x2,y2),(x3,y3)
// todo: add flip/rotate/mirror/skewitalic
// vec4( start_point, control_point_1, control_point_2, end_point)
#define a0_x vec4(.75,-1.32,-1.44,.75)
#define a0_y vec4(.77,1.95,-2.28,-.59)
#define a1_x vec4(.75,1.05,.32,1.)
#define a1_y vec4(-.59,1.82,.78,-1.)
#define b0_x vec4(-1.,.3,-1.66,-.8)
#define b0_y vec4(.2,3.3,5.,-1.)*2.
#define b1_x vec4(-1.,.6,2.,-.8)
#define b1_y vec4(.2,2.6,-1.6,-1.)
#define c0_x vec4(.8,-.5,-2.1,.94)
#define c0_y vec4(.8,1.8,-1.8,-.8)
#define c1_x vec4(.7,-.5,-2.1,.94)
#define c1_y vec4(.8,1.8,-1.8,-.8)
#define d0_x vec4(.64,-.8,-1.8,.74)
#define d0_y vec4(.78,1.9,-1.7,-.86)
#define d1_x vec4(.74,1.3,-.63,1.)
#define d1_y vec4(-.43,4.8,3.8,0.)*2.
#define e0_x vec4(-.8,2.8,-.65,-.8)
#define e0_y vec4(0.,-.27,2.3,-.1)
#define e1_x vec4(-.8,-.82,-.92,1.)
#define e1_y vec4(-.1,-.32,-1.2,-1.)
#define f0_x vec4(-.44,2.1,-1.,0.)*2.
#define f0_y vec4(.44,4.4,4.,-2.4)*2.
#define f1_x vec4(0.,.6,-1.24,.62)*2.
#define f1_y vec4(-2.4,1.28,.56,.6)*2.
#define g0_x vec4(.9,-.4,-2.3,.84)
#define g0_y vec4(.34,2.4,-1.8,-.99)
#define g1_x vec4(.9,1.,-14.1,-10.)
#define g1_y vec4(0.,-4.7,-3.5,-.9)*2.
#define h0_x vec4(-1.,.9,-1.1,-.75)
#define h0_y vec4(.43,4.5,3.4,-.5)*2.
#define h1_x vec4(-.75,-.24,.78,.94)
#define h1_y vec4(-1.,3.7,-1.35,-1.)
#define i0_x vec4(0.,-.14,-1.19,.64)
#define i0_y vec4(.8,-.48,-1.07,-1.)
#define i1_x vec4(-.05,.43,-.34,.07)
#define i1_y vec4(2.88,2.71,2.67,2.86)
#define j0_x vec4(0.,-.3,-14.1,-10.)
#define j0_y vec4(.5,-6.19,-1.7,-2.5)*2.
#define j1_x vec4(-.05,.43,-.34,.03)
#define j1_y vec4(2.88,2.71,2.67,2.96)
#define k0_x vec4(-.94,.58,-1.1,-.94)
#define k0_y vec4(.6,4.35,3.6,-.7)*2.
#define k1_x vec4(.4,-2.4,.3,.8)
#define k1_y vec4(.8,0.,0.,-1.)
#define l0_x vec4(-.4,1.,.3,-.17)
#define l0_y vec4(-.5,1.2,3.8,2.8)*2.
#define l1_x vec4(-.17,-.8,.38,.84)
#define l1_y vec4(2.8,1.8,-1.,-.5)*2.
#define m0_x vec4(-.9,-.9,-.33,0.)
#define m0_y vec4(-1.,.912,1.6,-.7)
#define m1_x vec4(0.,.33,.9,.9)
#define m1_y vec4(-.7,1.6,.912,-1.)
#define n0_x vec4(-1.07,-.64,-.9,-.76)
#define n0_y vec4(.35,.93,.85,-1.)
#define n1_x vec4(-.75,-.9,.7,.94)
#define n1_y vec4(-1.,.85,1.9,-1.)
#define o0_x vec4(0.,-1.1,-1.1,0.)
#define o0_y vec4(1.,.82,-.8,-1.)
#define o1_x vec4(0.,1.1,1.1,0.)
#define o1_y vec4(-1.,-.8,.82,1.)
#define p0_x vec4(-1,-.43,-.58,-1.3)
#define p0_y vec4(.43,1.5,-1.9,-3.)*2.
#define p1_x vec4(-.7,.83,1.75,-.7)
#define p1_y vec4(.8,1.9,-1.75,-.8)
#define q0_x vec4(.7,-.83,-1.75,0.)
#define q0_y vec4(.8,1.9,-1.75,-.8)
#define q1_x vec4(.7,-1.5,-1.74,4.13)
#define q1_y vec4(.26,-2.7,-4.76,-2.5)*2.
#define r0_x vec4(-.88,-.28,-.43,-.5)
#define r0_y vec4(.86,1.5,-.67,-1.)
#define r1_x vec4(-.5,-.54,.22,.9)
#define r1_y vec4(-1.,1.,1.,.8)
#define s0_x vec4(.78,-.7,-1.5,0.)
#define s0_y vec4(.88,1.34,.55,0.)
#define s1_x vec4(0.,1.5,.67,-.9)
#define s1_y vec4(0.,-.55,-1.35,-.8)
#define t0_x vec4(-.55,.35,-1.37,.76)
#define t0_y vec4(3.,1.16,-1.1,-1.)*2.
#define t1_x vec4(-1.,-7.7,-1.4,4.5)
#define t1_y vec4(2.84,2.4,1.7,2.)*2.
#define u0_x vec4(-.9,-1.1,1.,.72)
#define u0_y vec4(.9,-1.6,-1.7,.9)
#define u1_x vec4(.72,.7,1.,1.4)
#define u1_y vec4(.9,-1.6,-1.,-.77)
#define v0_x vec4(-1.,-.83,-.236,0.)
#define v0_y vec4(.88,1.5,-.73,-1.)
#define v1_x vec4(0.,1.55,-.25,1.)
#define v1_y vec4(-1.,1.8,.9,.65)
#define w0_x vec4(-.9,-1.2,-.33,0.)
#define w0_y vec4(1.,-.912,-1.6,.7)
#define w1_x vec4(0.,.33,.9,.9)
#define w1_y vec4(.7,-1.6,-.912,1.)
#define x0_x vec4(.83,.25,-.3,-1.)
#define x0_y vec4(.95,.6,-.5,-1.)
#define x1_x vec4(-.9,.48,-.43,1.)
#define x1_y vec4(.87,.35,-.5,-1.)
#define y0_x vec4(-.9,-.2,.9,.9)
#define y0_y vec4(.9,-2.9,0.,.9)
#define y1_x vec4(.9,-.37,-14.1,-10.)
#define y1_y vec4(.2,-4.7,-3.5,-.9)*2.
#define z0_x vec4(-.9,1.1,1.3,0.)
#define z0_y vec4(.9,.9,1.5,0.)
#define z1_x vec4(0.,-1.3,-1.1,.9)
#define z1_y vec4(0.,-1.5,-.9,-.9)

#define love0_x vec4(0.,-.45,-2.,0.)*3.
#define love0_y vec4(.58,1.4,1.,-1.)*3.
#define love1_x vec4(0.,2.,.45,0.)*3.
#define love1_y vec4(-1.,1.,1.4,.58)*3.
#define qu0_x vec4(-.66,2.74,-.3,-.05)
#define qu0_y vec4(2.9,3.35,1.6,.58)*2.
#define qu1_x vec4(-.05,.43,-.34,.03)
#define qu1_y vec4(-.42,-.59,-.63,-.44)

// include scale and translate of raw chars which are by default 
#define draw(a,b,c,d) a/2.,b/2.,c/2.,d/2.

// combine x and y coordinates of 1st and 2nd curves needed to draw the char
#define A draw(a0_x,a0_y,a1_x,a1_y),
#define B draw(b0_x,b0_y,b1_x,b1_y),
#define C draw(c0_x,c0_y,c1_x,c1_y),
#define D draw(d0_x,d0_y,d1_x,d1_y),
#define E draw(e0_x,e0_y,e1_x,e1_y),
#define F draw(f0_x,f0_y,f1_x,f1_y),
#define G draw(g0_x,g0_y,g1_x,g1_y),
#define H draw(h0_x,h0_y,h1_x,h1_y),
#define I draw(i0_x,i0_y,i1_x,i1_y),
#define J draw(j0_x,j0_y,j1_x,j1_y),
#define K draw(k0_x,k0_y,k1_x,k1_y),
#define L draw(l0_x,l0_y,l1_x,l1_y),
#define M draw(m0_x,m0_y,m1_x,m1_y),
#define N draw(n0_x,n0_y,n1_x,n1_y),
#define O draw(o0_x,o0_y,o1_x,o1_y),
#define P draw(p0_x,p0_y,p1_x,p1_y),
#define Q draw(q0_x,q0_y,q1_x,q1_y),
#define R draw(r0_x,r0_y,r1_x,r1_y),
#define S draw(s0_x,s0_y,s1_x,s1_y),
#define T draw(t0_x,t0_y,t1_x,t1_y),
#define U draw(u0_x,u0_y,u1_x,u1_y),
#define V draw(v0_x,v0_y,v1_x,v1_y),
#define W draw(w0_x,w0_y,w1_x,w1_y),
#define X draw(x0_x,x0_y,x1_x,x1_y),
#define Y draw(y0_x,y0_y,y1_x,y1_y),
#define Z draw(z0_x,z0_y,z1_x,z1_y),
#define DOT draw(vec4(0),vec4(0),vec4(0),vec4(0)),
#define QU draw(qu0_x,qu0_y,qu1_x,qu1_y),
#define _S draw(s0_x,s0_y*3.,s1_x,s1_y*3.),
#define LOVE draw(love0_x,love0_y,love1_x,love1_y),
#define SP draw(vec4(0.),vec4(10.),vec4(0.),vec4(10.)),
#define END draw(vec4(0.),vec4(10.),vec4(0.),vec4(10.))
#define fN  34 
//#define fN 10
vec4 chars[] = vec4[ fN *4 ] ( 
 
    //_S DOT O R A Y A LOVE _S		// final S to join seamlessly with first S
    
    SP DOT I N T E R E S T I N G DOT    // display first char longer by doubling up
    M O R P H I N G DOT
    O F DOT
    T E X T DOT SP SP					
    
    END		// necessary
);
#define time iTime
#define pi 3.14159265

//Included a few types of parametric curves
// 1= Hypotrochoid | 2 = Epitrochoid | 3 = Rose curve | 4 = Lissajous | 5 =  Hypocycloid
#define TYPE 4

//Coloring scheme
// 1 = Default | 3 = Vintage | 3 = Argon
#define COLOR_TYPE 3

//might need to be adjusted depending on the curve
#define STRIDE 0.035

#if TYPE == 5
#undef STRIDE
#define STRIDE 0.13
#endif

//the main number of iterations to find the global minimum region (simple curves need much less)
#define ITR 100

//for animations
float sfloor(in float x, in float w)
{
    float fx = floor(x);
    return fx+smoothstep(fx+w,fx+1.-w,x);
}

//parametric equation
vec2 f(vec4 x0,vec4 y0,in float t)
{   
    //Hypotrochoid
    #if TYPE == 1
    float cam= sfloor(time*0.6,.2)*pi;
    float R = mod(floor(time*0.3),9.)+3.;
    const float r = 1.;
    //float d = sin(time*1.)*2.+3.5;
    float d= R;
    float x = ((R-r)*cos(t-cam)+d*cos((R-r)/r*t))/(R+.5)*3.;
    float y = ((R-r)*sin(t)-d*sin((R-r)/r*t))/(R+.5)*3.;
    
    //Epitrochoid
    #elif TYPE == 2
    float cam= sfloor(time*0.4,.1)*pi*2.;
    const float R = 2.8;
    const float r = .4;
    float d = sin(time*0.21)*2.+2.6;
    float x = (R+r)*cos(t-cam)-d*cos((R+r)/r*t);
    float y = (R+r)*sin(t)-d*sin((R+r)/r*t);
    
    //Rose Curve
    #elif TYPE == 3
    float cam= sfloor(time*0.4,.1)*pi;
    float k = mod(floor(time*0.4),6.)+2.;
    float x = cos(k*t-cam)*cos(t+cam)*5.5;
    float y = cos(k*t)*sin(t)*5.5;
    
    //Lissajous
    #elif TYPE == 4
    float ft = mod(floor(time*0.25),3.);
    float a = 3.+ft;
    float b = 2.+ft;
    //float y = sin(a*t+pi/2.+time*1.5)*5.;
    //float x = sin(b*t)*5.;
    #define a0_x vec4(.75,-1.32,-1.44,.75)
#define a0_y vec4(.77,1.95,-2.28,-.59)

    t = mod(t,1.);
    float t1=1.-t;
    float x = t1*t1*t1*x0[0]+ 3.*t1*t1*t*x0[1] + 3.*t1*t*t*x0[2]+ t*t*t*x0[3] ;   
    float y = t1*t1*t1*y0[0]+ 3.*t1*t1*t*y0[1] + 3.*t1*t*t*y0[2]+ t*t*t*y0[3] ;  
    x=-x;
    y=-y;
        
    //Hypocycloid (just a special case of hypotrochoids)
    #elif TYPE == 5
    const float a = 6.;
    float ft = mod(floor(time*0.25),5.)+2.25;
    float b = 6./ft;
    float cam= sfloor(time*0.5,.2)*pi;
    float x = ((a-b)*cos(t-cam) + b*cos(t*(a/b-1.)));
    float y = ((a-b)*sin(t) - b*sin(t*(a/b-1.)));
    
    #else
    //we can also use triangle waves :)
    float x= (abs(fract(t*1.+time*0.2)-0.5)-0.25)*20.;
    float y= ((abs(fract(t*.5+.5*abs(fract(t*.5+.5)-0.5))-0.5))-0.25)*20.;
    #endif

    return vec2(x,y);
}

//squared distance from point (pixel) to curve
float fd(vec4 x,vec4 y,in vec2 p, in float t)
{
    p = p+f(x,y,t);
    return dot(p,p);
}


//root finding on the derivative
float bisect(vec4 x,vec4 y,in vec2 p, in float near, in float far)
{
    float mid = 0.;
    float mdrv = 0.;
    float ep = 0.02;
    for (int i = 0; i <= 5; i++)
    {
        mid = (near + far)*.5;
        mdrv = fd(x,y,p, mid+ep)-fd(x,y,p, mid-ep);
        if (abs(mdrv) < 0.001)break;
        mdrv > 0. ? far=mid : near=mid;
    }    
    //once the root is found. return the actual length (not squared)
    return length(p+ f(x,y,(near + far)*.5));
}


//this function can most definitely be optimized
float intersect(vec4 x, vec4 y, in vec2 p, in float near, in float far)
{
    float t = near;
    float told = near;
    float nr = 0., fr = 1.;
    float mn = 10000.;
    
    for (int i = 0; i <= 120; i++)
    {
        float d = fd(x,y,p, t);
        if (d < mn)
        {
            mn = d;
            nr = told;
            fr = t+.05;
        }
        if (t > far)break;
        told = t;
        //t += log(d1+1.15)*.03;
        t += log(d+1.15)*STRIDE;
    }
    
   	return bisect(x,y,p, nr,fr);
}


//Reinhard based tone mapping
vec3 tone(vec3 color, float gamma)
{
	float white = 2.;
	float luma = dot(color, vec3(0.2126, 0.7152, 0.0722));
	float toneMappedLuma = luma * (1. + luma / (white*white)) / (1. + luma);
	color *= toneMappedLuma / luma;
	color = pow(color, vec3(1. / gamma));
	return color;
}
const int speed=25;

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    int fr = iFrame * speed/10;
    
    //vec2 p = (8.*fragCoord.xy-iResolution.xy*4.)/iResolution.y;    
 	float d = 10.;  
    float m = fract(float(fr)/100.);
    int frame = (fr/100) %(fN-2);
    // position of character in chars[], corresponding to the current screen frame count iFrame previously drawn
    vec4 ca = mix(chars[frame*4],chars[frame*4+4],m);
    vec4 cb = mix(chars[frame*4+1]+.5,chars[frame*4+5]+.5,m);
    vec4 cc = mix(chars[frame*4+2],chars[frame*4+6],m);
    vec4 cd = mix(chars[frame*4+3]+.5,chars[frame*4+7]+.5,m);

    
	//vec3 col = mix( vec3(0.), vec3(1.),  smoothstep(0.07,.12,d) );

    
    vec2 p = fragCoord.xy / iResolution.xy-0.5;
    vec2 bp = p+0.5;
	p.x *= iResolution.x/iResolution.y;
    p *= 7.;
    float rz = intersect(ca,cb, p,0.,30.)
        * intersect(cc,cd, p,0.,30.);
    
    #if COLOR_TYPE == 1
    rz = pow(rz*2.,0.5);
    vec3 col = vec3(2.,1.5,.1)*1.-log(rz+1.8);
    col = clamp(col,0.5,10.);
    col *= (texture(iChannel0,p*0.00025*iResolution.x+fract(time)*vec2(51,100)).r-0.5)*.24+1.;
    col = mix(col,tone(col,1.7),0.5);
    
    #elif COLOR_TYPE == 2
    vec3 col = vec3(5.,1.5,.5)*log(rz+1.05);
    col = tone(col,8.5);
    col *= (texture(iChannel0,p*0.00017*iResolution.x+fract(time)*vec2(51,100)).r-0.5)*.12+1.;
    
    #else
    rz = pow(rz*50.,.7);
    vec3 col = vec3(.6,.2,1.)/(rz+1.5)*9.;
    col *= (texture(iChannel0,p*0.00025*iResolution.x+fract(time)*vec2(51,100)).r-0.5)*.45+1.;
    col = tone(col,1.6);
    #endif
    
    
    //vign from iq (very nice!)
	col *= pow(16.0*bp.x*bp.y*(1.0-bp.x)*(1.0-bp.y),.45);
    
	fragColor = vec4(col,1.0);
}
