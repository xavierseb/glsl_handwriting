// handwriting morphing, Xavierseb 2019

// bezier control points coordinates (x0,x1,x2,x3) and (y0,y1,y2,y3)
// font char is drawn by bezier spline with control points at (x0,y0),(x1,y1),(x2,y2),(x3,y3)
// todo: add flip/rotate/mirror/skewitalic
// vec4( start_point, control_point_1, control_point_2, end_point)
#define a0_x vec4(.75,-1.32,-1.44,.75)
#define a0_y vec4(.77,1.95,-2.28,-.59)
#define a1_x vec4(.75,1.05,.32,1.)
#define a1_y vec4(-.59,1.82,.78,-1.)
#define b0_x vec4(-1.,.3,-1.66,-.8)
#define b0_y vec4(.2,3.3,5.,-1.)
#define b1_x vec4(-1.,.6,2.,-.8)
#define b1_y vec4(.2,2.6,-1.6,-1.)
#define c0_x vec4(.8,-.5,-2.1,.94)
#define c0_y vec4(.8,1.8,-1.8,-.8)
#define c1_x vec4(.7,-.5,-2.1,.94)
#define c1_y vec4(.8,1.8,-1.8,-.8)
#define d0_x vec4(.64,-.8,-1.8,.74)
#define d0_y vec4(.78,1.9,-1.7,-.86)
#define d1_x vec4(.74,1.3,-.63,1.)
#define d1_y vec4(-.43,4.8,3.8,0.)
#define e0_x vec4(-.8,2.8,-.65,-.8)
#define e0_y vec4(0.,-.27,2.3,-.1)
#define e1_x vec4(-.8,-.82,-.92,1.)
#define e1_y vec4(-.1,-.32,-1.2,-1.)
#define f0_x vec4(-.44,2.1,-1.,0.)
#define f0_y vec4(.44,4.4,4.,-2.4)
#define f1_x vec4(0.,.6,-1.24,.62)
#define f1_y vec4(-2.4,1.28,.56,.6)
#define g0_x vec4(.9,-.4,-2.3,.84)
#define g0_y vec4(.34,2.4,-1.8,-.99)
#define g1_x vec4(.9,1.,-1.,-.9)
#define g1_y vec4(0.,-4.7,-3.5,-2.9)
#define h0_x vec4(-1.,.9,-1.1,-.75)
#define h0_y vec4(.43,4.5,3.4,-.5)
#define h1_x vec4(-.75,-.24,.78,.94)
#define h1_y vec4(-1.,3.7,-1.35,-1.)
#define i0_x vec4(0.,-.14,-1.19,.64)
#define i0_y vec4(.8,-.48,-1.07,-1.)
#define i1_x vec4(-.05,.43,-.34,.07)
#define i1_y vec4(2.88,2.71,2.67,2.86)
#define j0_x vec4(0.,-.3,-1.,-.8)
#define j0_y vec4(.5,-5.19,-1.7,-2.5)
#define j1_x vec4(-.05,.43,-.34,.03)
#define j1_y vec4(2.88,2.71,2.67,2.96)
#define k0_x vec4(-.94,.58,-1.1,-.94)
#define k0_y vec4(.6,4.35,3.6,-.7)
#define k1_x vec4(.4,-2.4,.3,.8)
#define k1_y vec4(.8,0.,0.,-1.)
#define l0_x vec4(-.4,1.,.3,-.17)
#define l0_y vec4(-.5,1.2,3.8,2.8)
#define l1_x vec4(-.17,-.8,.38,.84)
#define l1_y vec4(2.8,1.8,-1.,-.5)
#define m0_x vec4(-.9,-.9,-.33,0.)
#define m0_y vec4(-1.,.912,1.6,-.7)
#define m1_x vec4(0.,.33,.9,.9)
#define m1_y vec4(-.7,1.6,.912,-1.)
#define n0_x vec4(-1.07,-.64,-.9,-.76)
#define n0_y vec4(.35,.93,.85,-1.)
#define n1_x vec4(-.75,-.9,.7,.94)
#define n1_y vec4(-1.,.85,1.9,-1.)
#define o0_x vec4(0.,-1.1,-1.1,0.)
#define o0_y vec4(1.,.82,-.8,-1.)
#define o1_x vec4(0.,1.1,1.1,0.)
#define o1_y vec4(-1.,-.8,.82,1.)
#define p0_x vec4(-1,-.43,-.58,-.73)
#define p0_y vec4(.43,1.5,-1.9,-3.)
#define p1_x vec4(-.7,.83,1.75,-.7)
#define p1_y vec4(.8,1.9,-1.75,-.8)
#define q0_x vec4(.7,-.83,-1.75,0.)
#define q0_y vec4(.8,1.9,-1.75,-.8)
#define q1_x vec4(.7,-.5,-.54,.93)
#define q1_y vec4(.26,-2.7,-4.76,-2.5)
#define r0_x vec4(-.88,-.28,-.43,-.5)
#define r0_y vec4(.86,1.5,-.67,-1.)
#define r1_x vec4(-.5,-.54,.22,.9)
#define r1_y vec4(-1.,1.,1.,.8)
#define s0_x vec4(.78,-.7,-1.5,0.)
#define s0_y vec4(.88,1.34,.55,0.)
#define s1_x vec4(0.,1.5,.67,-.9)
#define s1_y vec4(0.,-.55,-1.35,-.8)
#define t0_x vec4(-.55,.35,-1.37,.76)
#define t0_y vec4(3.,1.16,-1.1,-1.)
#define t1_x vec4(-1.,-.7,-1.4,.9)
#define t1_y vec4(1.64,1.54,1.7,1.7)
#define u0_x vec4(-.9,-1.1,1.,.72)
#define u0_y vec4(.9,-1.6,-1.7,.9)
#define u1_x vec4(.72,.7,1.,1.4)
#define u1_y vec4(.9,-1.6,-1.,-.77)
#define v0_x vec4(-1.,-.83,-.236,0.)
#define v0_y vec4(.88,1.5,-.73,-1.)
#define v1_x vec4(0.,1.55,-.25,1.)
#define v1_y vec4(-1.,1.8,.9,.65)
#define w0_x vec4(-.9,-1.2,-.33,0.)
#define w0_y vec4(1.,-.912,-1.6,.7)
#define w1_x vec4(0.,.33,.9,.9)
#define w1_y vec4(.7,-1.6,-.912,1.)
#define x0_x vec4(.83,.25,-.3,-1.)
#define x0_y vec4(.95,.6,-.5,-1.)
#define x1_x vec4(-.9,.48,-.43,1.)
#define x1_y vec4(.87,.35,-.5,-1.)
#define y0_x vec4(-.9,-.2,.9,.9)
#define y0_y vec4(.9,-2.9,0.,.9)
#define y1_x vec4(.9,-.37,-1.,-.9)
#define y1_y vec4(.2,-4.7,-3.5,-2.9)
#define z0_x vec4(-.9,1.1,1.3,0.)
#define z0_y vec4(.9,.9,1.5,0.)
#define z1_x vec4(0.,-1.3,-1.1,.9)
#define z1_y vec4(0.,-1.5,-.9,-.9)

#define love0_x vec4(0.,-.45,-2.,0.)*1.2
#define love0_y vec4(.58,1.4,1.,-1.)*1.2
#define love1_x vec4(0.,2.,.45,0.)*1.2
#define love1_y vec4(-1.,1.,1.4,.58)*1.2
#define qu0_x vec4(-.66,2.74,-.3,-.05)
#define qu0_y vec4(2.9,3.35,1.6,.58)
#define qu1_x vec4(-.05,.43,-.34,.03)
#define qu1_y vec4(-.42,-.59,-.63,-.44)

// include scale and translate of raw chars which are by default 
#define draw(a,b,c,d) a,b,c,d

// combine x and y coordinates of 1st and 2nd curves needed to draw the char
#define A draw(a0_x,a0_y,a1_x,a1_y),
#define B draw(b0_x,b0_y,b1_x,b1_y),
#define C draw(c0_x,c0_y,c1_x,c1_y),
#define D draw(d0_x,d0_y,d1_x,d1_y),
#define E draw(e0_x,e0_y,e1_x,e1_y),
#define F draw(f0_x,f0_y,f1_x,f1_y),
#define G draw(g0_x,g0_y,g1_x,g1_y),
#define H draw(h0_x,h0_y,h1_x,h1_y),
#define I draw(i0_x,i0_y,i1_x,i1_y),
#define J draw(j0_x,j0_y,j1_x,j1_y),
#define K draw(k0_x,k0_y,k1_x,k1_y),
#define L draw(l0_x,l0_y,l1_x,l1_y),
#define M draw(m0_x,m0_y,m1_x,m1_y),
#define N draw(n0_x,n0_y,n1_x,n1_y),
#define O draw(o0_x,o0_y,o1_x,o1_y),
#define P draw(p0_x,p0_y,p1_x,p1_y),
#define Q draw(q0_x,q0_y,q1_x,q1_y),
#define R draw(r0_x,r0_y,r1_x,r1_y),
#define S draw(s0_x,s0_y,s1_x,s1_y),
#define T draw(t0_x,t0_y,t1_x,t1_y),
#define U draw(u0_x,u0_y,u1_x,u1_y),
#define V draw(v0_x,v0_y,v1_x,v1_y),
#define W draw(w0_x,w0_y,w1_x,w1_y),
#define X draw(x0_x,x0_y,x1_x,x1_y),
#define Y draw(y0_x,y0_y,y1_x,y1_y),
#define Z draw(z0_x,z0_y,z1_x,z1_y),
#define _ draw(vec4(0),vec4(0),vec4(0),vec4(0)),
#define QU draw(qu0_x,qu0_y,qu1_x,qu1_y),
#define _S draw(s0_x,s0_y*3.,s1_x,s1_y*3.),
#define LOVE draw(love0_x,love0_y,love1_x,love1_y),
#define SP draw(vec4(0.),vec4(10.),vec4(0.),vec4(10.)),
#define END draw(vec4(0.),vec4(10.),vec4(0.),vec4(10.))

// randomizing to emulate messy handwriting
#define rnd(p) vec4(.22*fract(sin(p/1.1)*100000.0),.582*fract(sin(p/1.2)*100000.0),.582*fract(sin(p/1.3)*100000.0),.2*fract(sin(p/1.4)*100000.0))
#define rnd1(p) vec4(.2*fract(sin(p/1.5)*100000.0),.5842*fract(sin(p/1.6)*100000.0),.5842*fract(sin(p/1.7)*100000.0),.2*fract(sin(p/1.8)*100000.0))

// 2 bezier curves for each character, 
// e.g. for the letter a, 
// x coords of control points are vec4(.75,-1.32,-1.44,.75) = x-coords of curve first part of 'a', vec4(.77,1.95,-2.28,-.59) = x-coords of second curve to draw 'a'
// y coords are vec4(.75,1.05,.32,1.), vec4(-.59,1.82,.78,-1.), ditto
// note: combining mismatched letters can make other interesting shapes.
// number of chars

#define mat(t) mat4(cos(t),sin(t),0.,0.,-sin(t),cos(t),0.,0.,0.,0.,cos(t),sin(t),0.,0.,-sin(t),cos(t))
//#define mat(t) mat4(t)

#define widthInChars 10
#define iNumLines 5
vec4 chars[] = vec4[ widthInChars * iNumLines *4 +4 ] ( 
    
  SP SP SP SP SP SP SP SP SP SP
  SP M O R P H SP SP SP SP
  SP M O R P H I N G SP 
  SP T H E S E LOVE LOVE LOVE SP
  SP W O R D S SP LOVE SP SP
       
    END		
);

vec4 getPos(float t, mat4 c)
{    
    float t1 = 1.-t;   
    return c*vec4(t1*t1*t1, 3.*t1*t1*t, 3.*t1*t*t, t*t*t);
}

float doSomething(int icharPos, int nextLine, vec2 p, float m) {
    mat4 My = 
        mat(.5*sin(6.28*sin(clamp(5.*m,0.,1.57))))*
        transpose( mat4(
        mix(chars[icharPos  ],chars[nextLine  ],m),
        mix(chars[icharPos+1],chars[nextLine+1],m),
   		mix(chars[icharPos+2],chars[nextLine+2],m),
        mix(chars[icharPos+3],chars[nextLine+3],m) ));
    //if( icharPos ==148 || icharPos==188) My *= (1.+.25*sin(6.28*sin(clamp(5.*m,0.,1.57))));//mat(.5*sin(6.28*sin(clamp(5.*m,0.,1.57))))*My;
    float d=10.;
    for(float i1=0.0; i1<1.0; i1+=0.1) {
        vec4 h0 = getPos(i1   ,My);//,p.x);
        vec4 h1 = getPos(i1+.1,My);
        
        d = min(d,distance(p, h0.xy ));   
        // try to spread out dots
        vec2 yd = h1.xy - h0.xy;
        float y = length(yd)*10.;
        yd /= y;        //yd = normalize(yd)/10.;
        for(; y>0.; y--,h0.xy+=yd) 
            //if (d>.01) // uncomment when using thicker text
                d=min(d,distance(p, h0.xy));
        
        d = min(d,distance(p, h0.zw ));   
        yd = h1.zw - h0.zw;
        y = length(yd)*10.;
        yd /= y;
       	for(; y>0.; y--, h0.zw+=yd)
    	    //if (d>.01) 
                d=min(d,distance(p, h0.zw));
    }
    return d;
}  

#define fAnimSmoothness 200.
#define speed 30
void mainImage( out vec4 fragColor, in vec2 fragCoord ){
    if(iFrameRate<30.) discard;

    const int numCharsX4 = chars.length() -4;
    float fr = float((iFrame*speed)/10)/fAnimSmoothness;
    float m = fract(fr);
   
    int curLine = int(fr) % iNumLines;//(numCharsX4/(4*widthInChars));// (fr/A)%numLines;
    vec2 p=((2.*fragCoord.xy-iResolution.xy)/iResolution.x +vec2(1.,0.))*float(widthInChars);
    int xsav = int(p.x/2.);
    p.x = mod(p.x,2.)-1.;
    
    int icharPos = ( xsav + curLine*widthInChars )*4;
    int nextLine = icharPos+widthInChars*4;
    if(nextLine>=numCharsX4) nextLine-=numCharsX4;
    
    float d = min(10., doSomething(icharPos,nextLine, p, m));
         
#define IMPROVED_DRAWING
#ifdef IMPROVED_DRAWING
	#define ADJ_CHAR vec2(2.,0.)
    if(xsav<widthInChars-1) 
        d = min(d, doSomething(icharPos+4, nextLine+4, p -ADJ_CHAR, m));
       
    if(xsav>0) 
        d = min(d, doSomething(icharPos-4, nextLine-4, p +ADJ_CHAR, m));
#endif
   
	//vec3 col = vec3(smoothstep(d,1.,smoothstep(d,.1,.18)));
	vec3 col = vec3(smoothstep(d,.1,.18));
	fragColor = vec4(col,1.0);
}
